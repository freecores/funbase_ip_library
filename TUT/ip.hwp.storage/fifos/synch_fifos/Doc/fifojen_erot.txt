
Fifo_case (global):
- input and output-register is always the same. 
- after the first data the following data is stored to
  a shift register
- see the fifo_case.ppt for more info

differencies between fifo_case's:
v3 - bug discovered - don't use
v4 - uses a variable rather than a signal to update control signals
     (Empty, Full, etc.).
v4a - doesn't reset to zero any register. only control + data_amount
v5 - code-level registered output (concurrent assignments), v3 doesn't have.
   - signal is used to update control signals.
v6 - different from v5 :  doesn't reset to zero any register. only control + 
     data_amount


fifo_im: uses mux in the input
fifo_iom: uses mux in the input and output
fifo_im_case: implemented as fifo_im except that uses "case" instead of "if".
	      (makes it concurrent rather than sequential)

there is a problem with fifo_im (both) when trying to write data even though 
fifo is full.


Fifo_cases:
tested: doesn't set the output to '0's when last data is read. 
Result: doesn't have a significant impact on anything
